{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"apksearch <p><code>apksearch</code> is a Python library designed to search for APK files on different APK websites, such as APKPure and APKMirror. It allows users to find APKs, check for available versions, and retrieve download links.</p> <p>The Inspiration: There were countless occasions when I needed a specific APK for a package name, only to find it unavailable on popular platforms. This led to the tedious task of manually visiting multiple websites and searching one by one.</p> screenshot <p>          As you can see, Roblox version <code>2.647.716</code> is not available on APKPure and APKCombo, this helped me avoid going through these sites.     </p> <p>P.S: If you're looking for an APK downloader, I highly recommend using apkeep.</p>"},{"location":"index.html#features","title":"Features","text":"<ul> <li>Search APKs: The library provides methods to search for APKs using package names.</li> <li>Retrieve APK Versions and Download Links: It can fetch available versions and their download links for a given APK from various websites.</li> <li>Command-Line Interface: A CLI is available for users to search for APKs directly from the command line.</li> </ul>"},{"location":"index.html#supported-websites","title":"Supported Websites","text":"<ul> <li>APKPure</li> <li>APKMirror</li> <li>Aptoide</li> <li>APKCombo</li> <li>APKFab</li> <li>Appteka</li> <li>APKAD</li> </ul> <p>[!NOTE] For site owners: If you're the owner of a website that's not listed here and you'd like to add support for it, feel free to open an issue or submit a pull request. I'm open to adding more websites to the library. I respect the value of user engagement and the revenue it generates for your site. To honor this, I have deliberately avoided including a download feature in the library, ensuring users will still need to visit your website, maintaining its traffic and engagement. Additionally, I kindly ask that you refrain from enforcing strict blocking measures, such as aggressive Cloudflare rules, as the library is designed to work collaboratively rather than disruptively. Thank you!</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>To install/upgrade the <code>apksearch</code> library, use the following command:</p> <pre><code>pip install -U git+https://github.com/AbhiTheModder/apksearch.git\n</code></pre> <p>OR, through pip:</p> <pre><code>pip install -U apksearch\n</code></pre> <p>OR, if you've cloned the repository locally you can do so via:</p> <pre><code>pip install -U . # or path to the local clone\n</code></pre>"},{"location":"index.html#usage","title":"Usage","text":""},{"location":"index.html#command-line-interface","title":"Command-Line Interface","text":"<p>To use the CLI, run the following command:</p> <pre><code>apksearch &lt;package_name&gt; [--version &lt;version&gt;]\n</code></pre> <p>Example:</p> <pre><code>apksearch com.roblox.client --version 2.652.765\n</code></pre>"},{"location":"index.html#testing","title":"Testing","text":"<p>The project includes tests for the <code>sites</code> classes. To run the tests, use the following command:</p> <pre><code>pytest\n</code></pre>"},{"location":"index.html#todo","title":"TODO","text":"<ul> <li>[ ] Add more websites to search for APKs.</li> </ul>"},{"location":"index.html#acknowledgements","title":"Acknowledgements","text":"<ul> <li>APKUpdater for APKMirror API.</li> <li>apkeep for APKPure API. (not used anymore)</li> </ul>"},{"location":"index.html#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more details.</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request on GitHub.</p> <p>If you find this project helpful, please consider giving it a \u2b50. Your support is greatly appreciated!</p>"},{"location":"api.html","title":"API Reference","text":""},{"location":"api.html#api-reference","title":"API Reference","text":""},{"location":"api.html#apksearch.APKCombo","title":"<code>APKCombo</code>","text":"<p>This class provides methods to search for an APK on APKCombo based on package name, and to find available versions and their download links for a given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> required <p>Attributes:</p> Name Type Description <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> <code>base_url</code> <code>str</code> <p>The base URL of the APKCombo website.</p> <code>search_url</code> <code>str</code> <p>The URL used to search for APKs on APKCombo.</p> <code>headers</code> <code>dict</code> <p>The headers used for making HTTP requests.</p> <code>session</code> <code>Session</code> <p>The session object used for making HTTP requests.</p> <p>Methods:</p> Name Description <code>search_apk</code> <p>Searches for the APK on APKCombo and returns the title and link if found.</p> <code>find_versions</code> <p>str) -&gt; list[tuple[str, str]]: Finds and returns a list of versions and their download links for the given APK link.</p> Source code in <code>apksearch/sites/apkcombo.py</code> <pre><code>class APKCombo:\n    \"\"\"\n    This class provides methods to search for an APK on APKCombo based on package name,\n    and to find available versions and their download links for a given APK link.\n\n    Parameters:\n        pkg_name (str): The package name of the APK to search for.\n\n    Attributes:\n        pkg_name (str): The package name of the APK to search for.\n        base_url (str): The base URL of the APKCombo website.\n        search_url (str): The URL used to search for APKs on APKCombo.\n        headers (dict): The headers used for making HTTP requests.\n        session (requests.Session): The session object used for making HTTP requests.\n\n    Methods:\n        search_apk() -&gt; None | tuple[str, str]:\n            Searches for the APK on APKCombo and returns the title and link if found.\n\n        find_versions(apk_link: str) -&gt; list[tuple[str, str]]:\n            Finds and returns a list of versions and their download links for the given APK link.\n    \"\"\"\n\n    def __init__(self, pkg_name: str):\n        self.pkg_name = pkg_name\n        self.base_url = \"https://apkcombo.com\"\n        self.search_url = self.base_url + \"/search\"\n        self.headers = {\n            \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n            \"accept-language\": \"en-US,en;q=0.9,en-IN;q=0.8\",\n            \"cache-control\": \"no-cache\",\n            \"cookie\": \"__apkcombo_lang=en\",\n            \"dnt\": \"1\",\n            \"pragma\": \"no-cache\",\n            \"priority\": \"u=0, i\",\n            \"referer\": \"https://apkcombo.com/\",\n            \"sec-ch-ua\": '\"Microsoft Edge\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            \"sec-fetch-user\": \"?1\",\n            \"upgrade-insecure-requests\": \"1\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0\",\n        }\n        self.session = requests.Session()\n\n    def search_apk(self) -&gt; None | tuple[str, str]:\n        \"\"\"\n        Searches for the APK on APKCombo and returns the title and link if found.\n\n        Returns:\n            None: If no matching APK is found.\n            tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n        \"\"\"\n        pkg_name = self.pkg_name\n        url = self.search_url + \"/\" + pkg_name\n        response: requests.Response = self.session.get(\n            url, headers=self.headers, allow_redirects=False\n        )\n        # Redirect to the APK page if there's only one result. i.e, apk found.\n        if response.status_code == 302:\n            url = self.search_url + response.headers[\"Location\"]\n            response: requests.Response = self.session.get(url, headers=self.headers)\n        elif response.status_code == 200:  # Package name not found or multiple results.\n            return None\n        else:\n            raise Exception(f\"Error: {response.status_code}\")\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        try:\n            title = soup.find(\"div\", {\"class\": \"app_name\"}).text.strip()\n        except AttributeError:\n            return None\n        apk_link = url\n        return title, apk_link\n\n    def find_versions(self, apk_link: str) -&gt; list[tuple[str, str]]:\n        \"\"\"\n        Finds and returns a list of versions and their download links for the given APK link.\n\n        Parameters:\n            apk_link (str): The link to the APK on the APKCombo website.\n\n        Returns:\n            list[tuple[str, str]]: A list of tuples, where each tuple contains the version number\n            and its corresponding download link. If no versions are found, an empty list is returned.\n        \"\"\"\n        url = apk_link + \"/old-versions\"\n        response: requests.Response = self.session.get(url, headers=self.headers)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        versions_list = soup.find(\"ul\", {\"class\": \"list-versions\"})\n        versions_info = []\n\n        if versions_list:\n            versions = versions_list.find_all(\"a\", {\"class\": \"ver-item\"})\n            for version in versions:\n                version_number = version.find(\"span\", {\"class\": \"vername\"}).text\n                version_number = version_number.split(\" \")[-1]\n                download_url = self.base_url + version[\"href\"]\n                versions_info.append((version_number, download_url))\n\n        return versions_info\n</code></pre>"},{"location":"api.html#apksearch.APKCombo.find_versions","title":"<code>find_versions(apk_link)</code>","text":"<p>Finds and returns a list of versions and their download links for the given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>apk_link</code> <code>str</code> <p>The link to the APK on the APKCombo website.</p> required <p>Returns:</p> Type Description <code>list[tuple[str, str]]</code> <p>list[tuple[str, str]]: A list of tuples, where each tuple contains the version number</p> <code>list[tuple[str, str]]</code> <p>and its corresponding download link. If no versions are found, an empty list is returned.</p> Source code in <code>apksearch/sites/apkcombo.py</code> <pre><code>def find_versions(self, apk_link: str) -&gt; list[tuple[str, str]]:\n    \"\"\"\n    Finds and returns a list of versions and their download links for the given APK link.\n\n    Parameters:\n        apk_link (str): The link to the APK on the APKCombo website.\n\n    Returns:\n        list[tuple[str, str]]: A list of tuples, where each tuple contains the version number\n        and its corresponding download link. If no versions are found, an empty list is returned.\n    \"\"\"\n    url = apk_link + \"/old-versions\"\n    response: requests.Response = self.session.get(url, headers=self.headers)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    versions_list = soup.find(\"ul\", {\"class\": \"list-versions\"})\n    versions_info = []\n\n    if versions_list:\n        versions = versions_list.find_all(\"a\", {\"class\": \"ver-item\"})\n        for version in versions:\n            version_number = version.find(\"span\", {\"class\": \"vername\"}).text\n            version_number = version_number.split(\" \")[-1]\n            download_url = self.base_url + version[\"href\"]\n            versions_info.append((version_number, download_url))\n\n    return versions_info\n</code></pre>"},{"location":"api.html#apksearch.APKCombo.search_apk","title":"<code>search_apk()</code>","text":"<p>Searches for the APK on APKCombo and returns the title and link if found.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None | tuple[str, str]</code> <p>If no matching APK is found.</p> <code>None | tuple[str, str]</code> <p>tuple[str, str]: A tuple containing the title and link of the matching APK if found.</p> Source code in <code>apksearch/sites/apkcombo.py</code> <pre><code>def search_apk(self) -&gt; None | tuple[str, str]:\n    \"\"\"\n    Searches for the APK on APKCombo and returns the title and link if found.\n\n    Returns:\n        None: If no matching APK is found.\n        tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n    \"\"\"\n    pkg_name = self.pkg_name\n    url = self.search_url + \"/\" + pkg_name\n    response: requests.Response = self.session.get(\n        url, headers=self.headers, allow_redirects=False\n    )\n    # Redirect to the APK page if there's only one result. i.e, apk found.\n    if response.status_code == 302:\n        url = self.search_url + response.headers[\"Location\"]\n        response: requests.Response = self.session.get(url, headers=self.headers)\n    elif response.status_code == 200:  # Package name not found or multiple results.\n        return None\n    else:\n        raise Exception(f\"Error: {response.status_code}\")\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    try:\n        title = soup.find(\"div\", {\"class\": \"app_name\"}).text.strip()\n    except AttributeError:\n        return None\n    apk_link = url\n    return title, apk_link\n</code></pre>"},{"location":"api.html#apksearch.APKFab","title":"<code>APKFab</code>","text":"<p>This class provides methods to search for an APK on APKFab based on package name, and to find available versions and their download links for a given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> required <p>Attributes:</p> Name Type Description <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> <code>base_url</code> <code>str</code> <p>The base URL of the APKFab website.</p> <code>search_url</code> <code>str</code> <p>The URL used to search for APKs on APKFab.</p> <code>headers</code> <code>dict</code> <p>The headers used for making HTTP requests.</p> <code>session</code> <code>Session</code> <p>The session object used for making HTTP requests.</p> <p>Methods:</p> Name Description <code>search_apk</code> <p>Searches for the APK on APKFab and returns the title and link if found.</p> <code>find_versions</code> <p>str) -&gt; list[tuple[str, str]]: Finds and returns a list of versions and their download links for the given APK link.</p> Source code in <code>apksearch/sites/apkfab.py</code> <pre><code>class APKFab:\n    \"\"\"\n    This class provides methods to search for an APK on APKFab based on package name,\n    and to find available versions and their download links for a given APK link.\n\n    Parameters:\n        pkg_name (str): The package name of the APK to search for.\n\n    Attributes:\n        pkg_name (str): The package name of the APK to search for.\n        base_url (str): The base URL of the APKFab website.\n        search_url (str): The URL used to search for APKs on APKFab.\n        headers (dict): The headers used for making HTTP requests.\n        session (requests.Session): The session object used for making HTTP requests.\n\n    Methods:\n        search_apk() -&gt; None | tuple[str, str]:\n            Searches for the APK on APKFab and returns the title and link if found.\n\n        find_versions(apk_link: str) -&gt; list[tuple[str, str]]:\n            Finds and returns a list of versions and their download links for the given APK link.\n    \"\"\"\n\n    def __init__(self, pkg_name: str):\n        self.pkg_name = pkg_name\n        self.base_url = \"https://apkfab.com\"\n        self.search_url = self.base_url + \"/search?q=\"\n        self.headers = {\n            \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n            \"accept-language\": \"en-US,en;q=0.9,en-IN;q=0.8\",\n            \"cache-control\": \"no-cache\",\n            \"dnt\": \"1\",\n            \"pragma\": \"no-cache\",\n            \"priority\": \"u=0, i\",\n            \"referer\": \"https://apkfab.com/search\",\n            \"sec-ch-ua\": '\"Microsoft Edge\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            \"sec-fetch-user\": \"?1\",\n            \"upgrade-insecure-requests\": \"1\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0\",\n        }\n        self.session = requests.Session()\n\n    def search_apk(self) -&gt; None | tuple[str, str]:\n        \"\"\"\n        Searches for the APK on APKFab and returns the title and link if found.\n\n        Returns:\n            None: If no matching APK is found.\n            tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n        \"\"\"\n        pkg_name = self.pkg_name\n        url = self.search_url + pkg_name\n        params = {\"headers\": self.headers}\n        if curl:\n            params[\"impersonate\"] = \"chrome\"\n        response: requests.Response = self.session.get(url, **params)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        search_result = soup.find(\"div\", {\"class\": \"search-white\"})\n        if search_result:\n            container = search_result.find(\"div\", {\"class\": \"container\"})\n            if container:\n                lists = container.find(\"div\", {\"class\": \"list-template lists\"})\n                if lists:\n                    items = lists.find_all(\"div\", {\"class\": \"list\"})\n                    if items:\n                        item = items[0]\n                        apk_title = item.find(\"div\", {\"class\": \"title\"}).text\n                        apk_link = item.find(\"a\")[\"href\"]\n                        package_name = apk_link.split(\"/\")[-1]\n                        if package_name == pkg_name:\n                            return apk_title, apk_link\n        return None\n\n    def find_versions(self, apk_link: str) -&gt; list[tuple[str, str]]:\n        \"\"\"\n        Finds and returns a list of versions and their download links for the given APK link.\n\n        Parameters:\n            apk_link (str): The link to the APK on the APKFab website.\n\n        Returns:\n            list[tuple[str, str]]: A list of tuples, where each tuple contains the version number\n            and its corresponding download link. If no versions are found, an empty list is returned.\n        \"\"\"\n        versions_info = []\n        if apk_link.startswith(self.base_url):\n            url = apk_link + \"/versions\"\n            response: requests.Response = self.session.get(url, headers=self.headers)\n            soup = BeautifulSoup(response.text, \"html.parser\")\n            versions_list = soup.find(\"div\", {\"class\": \"version_history\"})\n\n            if versions_list:\n                versions = versions_list.find_all(\"div\", {\"class\": \"list\"})\n                if versions:\n                    for version in versions:\n                        package_info = version.find(\n                            \"div\", {\"class\": \"package_info open_info\"}\n                        )\n                        if package_info:\n                            title = package_info.find(\"div\", {\"class\": \"title\"})\n                            apk_version = title.find(\n                                \"span\", {\"class\": \"version\"}\n                            ).text.strip()\n                            dl = version.find(\n                                \"div\", {\"class\": \"v_h_button button_down\"}\n                            )\n                            if dl:\n                                download_link = dl.find(\"a\")[\"href\"]\n                                versions_info.append((apk_version, download_link))\n                            else:\n                                # Some versions have multiple variants\n                                versions_info.append((apk_version, url))\n\n        return versions_info\n</code></pre>"},{"location":"api.html#apksearch.APKFab.find_versions","title":"<code>find_versions(apk_link)</code>","text":"<p>Finds and returns a list of versions and their download links for the given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>apk_link</code> <code>str</code> <p>The link to the APK on the APKFab website.</p> required <p>Returns:</p> Type Description <code>list[tuple[str, str]]</code> <p>list[tuple[str, str]]: A list of tuples, where each tuple contains the version number</p> <code>list[tuple[str, str]]</code> <p>and its corresponding download link. If no versions are found, an empty list is returned.</p> Source code in <code>apksearch/sites/apkfab.py</code> <pre><code>def find_versions(self, apk_link: str) -&gt; list[tuple[str, str]]:\n    \"\"\"\n    Finds and returns a list of versions and their download links for the given APK link.\n\n    Parameters:\n        apk_link (str): The link to the APK on the APKFab website.\n\n    Returns:\n        list[tuple[str, str]]: A list of tuples, where each tuple contains the version number\n        and its corresponding download link. If no versions are found, an empty list is returned.\n    \"\"\"\n    versions_info = []\n    if apk_link.startswith(self.base_url):\n        url = apk_link + \"/versions\"\n        response: requests.Response = self.session.get(url, headers=self.headers)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        versions_list = soup.find(\"div\", {\"class\": \"version_history\"})\n\n        if versions_list:\n            versions = versions_list.find_all(\"div\", {\"class\": \"list\"})\n            if versions:\n                for version in versions:\n                    package_info = version.find(\n                        \"div\", {\"class\": \"package_info open_info\"}\n                    )\n                    if package_info:\n                        title = package_info.find(\"div\", {\"class\": \"title\"})\n                        apk_version = title.find(\n                            \"span\", {\"class\": \"version\"}\n                        ).text.strip()\n                        dl = version.find(\n                            \"div\", {\"class\": \"v_h_button button_down\"}\n                        )\n                        if dl:\n                            download_link = dl.find(\"a\")[\"href\"]\n                            versions_info.append((apk_version, download_link))\n                        else:\n                            # Some versions have multiple variants\n                            versions_info.append((apk_version, url))\n\n    return versions_info\n</code></pre>"},{"location":"api.html#apksearch.APKFab.search_apk","title":"<code>search_apk()</code>","text":"<p>Searches for the APK on APKFab and returns the title and link if found.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None | tuple[str, str]</code> <p>If no matching APK is found.</p> <code>None | tuple[str, str]</code> <p>tuple[str, str]: A tuple containing the title and link of the matching APK if found.</p> Source code in <code>apksearch/sites/apkfab.py</code> <pre><code>def search_apk(self) -&gt; None | tuple[str, str]:\n    \"\"\"\n    Searches for the APK on APKFab and returns the title and link if found.\n\n    Returns:\n        None: If no matching APK is found.\n        tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n    \"\"\"\n    pkg_name = self.pkg_name\n    url = self.search_url + pkg_name\n    params = {\"headers\": self.headers}\n    if curl:\n        params[\"impersonate\"] = \"chrome\"\n    response: requests.Response = self.session.get(url, **params)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    search_result = soup.find(\"div\", {\"class\": \"search-white\"})\n    if search_result:\n        container = search_result.find(\"div\", {\"class\": \"container\"})\n        if container:\n            lists = container.find(\"div\", {\"class\": \"list-template lists\"})\n            if lists:\n                items = lists.find_all(\"div\", {\"class\": \"list\"})\n                if items:\n                    item = items[0]\n                    apk_title = item.find(\"div\", {\"class\": \"title\"}).text\n                    apk_link = item.find(\"a\")[\"href\"]\n                    package_name = apk_link.split(\"/\")[-1]\n                    if package_name == pkg_name:\n                        return apk_title, apk_link\n    return None\n</code></pre>"},{"location":"api.html#apksearch.APKMirror","title":"<code>APKMirror</code>","text":"<p>This class provides methods to search for an APK on APKMirror based on package name, and to find available versions and their download links for a given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> required <p>Attributes:</p> Name Type Description <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> <code>base_url</code> <code>str</code> <p>The base URL of the APKMirror website.</p> <code>api_url</code> <code>str</code> <p>The base URL for the APKMirror API.</p> <code>headers</code> <code>dict</code> <p>The headers used for making HTTP requests.</p> <code>session</code> <code>Session</code> <p>The session object used for making HTTP requests.</p> <p>Methods:</p> Name Description <code>search_apk</code> <p>Searches for the APK on APKMirror and returns the title and link if found.</p> <code>find_versions</code> <p>str) -&gt; list[tuple[str, str]]: Finds and returns a list of versions and their download links for the given APK link.</p> Source code in <code>apksearch/sites/apkmirror.py</code> <pre><code>class APKMirror:\n    \"\"\"\n    This class provides methods to search for an APK on APKMirror based on package name,\n    and to find available versions and their download links for a given APK link.\n\n    Parameters:\n        pkg_name (str): The package name of the APK to search for.\n\n    Attributes:\n        pkg_name (str): The package name of the APK to search for.\n        base_url (str): The base URL of the APKMirror website.\n        api_url (str): The base URL for the APKMirror API.\n        headers (dict): The headers used for making HTTP requests.\n        session (requests.Session): The session object used for making HTTP requests.\n\n    Methods:\n        search_apk() -&gt; None | tuple[str, str]:\n            Searches for the APK on APKMirror and returns the title and link if found.\n\n        find_versions(apk_link: str) -&gt; list[tuple[str, str]]:\n            Finds and returns a list of versions and their download links for the given APK link.\n    \"\"\"\n\n    def __init__(self, pkg_name: str):\n        self.pkg_name = pkg_name\n        self.base_url = \"https://www.apkmirror.com\"\n        self.api_url = self.base_url + \"/wp-json/apkm/v1\"\n        # https://github.com/rumboalla/apkupdater/blob/3.x/app/src/main/kotlin/com/apkupdater/service/ApkMirrorService.kt\n        self.headers = {\n            \"User-Agent\": \"APKUpdater-v3.0.3\",\n            \"Authorization\": \"Basic YXBpLWFwa3VwZGF0ZXI6cm01cmNmcnVVakt5MDRzTXB5TVBKWFc4\",\n            \"Content-Type\": \"application/json\",\n        }\n        self.session = requests.Session()\n\n    def search_apk(self) -&gt; None | tuple[str, str]:\n        \"\"\"\n        Searches for the APK on APKMirror and returns the title and link if found.\n\n        Returns:\n            None: If no matching APK is found.\n            tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n        \"\"\"\n        pkg_name = self.pkg_name\n        url = self.api_url + \"/app_exists\"\n        json = {\"pnames\": pkg_name}\n        response: requests.Response = self.session.post(\n            url, json=json, headers=self.headers\n        )\n        result = response.json()[\"data\"][0]\n        if result and result[\"exists\"]:\n            pname = result[\"pname\"]\n            if pname == pkg_name:\n                title = result[\"app\"][\"name\"]\n                apk_link = self.base_url + result[\"app\"][\"link\"]\n                return title, apk_link\n        return None\n\n    def find_version(self, apk_link: str, version: str, title: str) -&gt; str | None:\n        \"\"\"\n        Finds and returns the download link for the given APK link and version.\n\n        Parameters:\n            apk_link (str): The link to the APK on the APKMirror website.\n            version (str): The version number of the APK to find.\n\n        Returns:\n            str: The download link for the specified version of the APK.\n        \"\"\"\n        name = re.sub(r\"[(),]\", \"\", title).lower().replace(\" \", \"-\")\n        name = re.sub(r\"-+\", \"-\", name)\n        version = version.replace(\".\", \"-\")\n        url = apk_link + name + \"-\" + version + \"-release\"\n        response = self.session.get(url, headers=self.headers)\n        if response.status_code == 404:\n            return None\n        return url\n</code></pre>"},{"location":"api.html#apksearch.APKMirror.find_version","title":"<code>find_version(apk_link, version, title)</code>","text":"<p>Finds and returns the download link for the given APK link and version.</p> <p>Parameters:</p> Name Type Description Default <code>apk_link</code> <code>str</code> <p>The link to the APK on the APKMirror website.</p> required <code>version</code> <code>str</code> <p>The version number of the APK to find.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>The download link for the specified version of the APK.</p> Source code in <code>apksearch/sites/apkmirror.py</code> <pre><code>def find_version(self, apk_link: str, version: str, title: str) -&gt; str | None:\n    \"\"\"\n    Finds and returns the download link for the given APK link and version.\n\n    Parameters:\n        apk_link (str): The link to the APK on the APKMirror website.\n        version (str): The version number of the APK to find.\n\n    Returns:\n        str: The download link for the specified version of the APK.\n    \"\"\"\n    name = re.sub(r\"[(),]\", \"\", title).lower().replace(\" \", \"-\")\n    name = re.sub(r\"-+\", \"-\", name)\n    version = version.replace(\".\", \"-\")\n    url = apk_link + name + \"-\" + version + \"-release\"\n    response = self.session.get(url, headers=self.headers)\n    if response.status_code == 404:\n        return None\n    return url\n</code></pre>"},{"location":"api.html#apksearch.APKMirror.search_apk","title":"<code>search_apk()</code>","text":"<p>Searches for the APK on APKMirror and returns the title and link if found.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None | tuple[str, str]</code> <p>If no matching APK is found.</p> <code>None | tuple[str, str]</code> <p>tuple[str, str]: A tuple containing the title and link of the matching APK if found.</p> Source code in <code>apksearch/sites/apkmirror.py</code> <pre><code>def search_apk(self) -&gt; None | tuple[str, str]:\n    \"\"\"\n    Searches for the APK on APKMirror and returns the title and link if found.\n\n    Returns:\n        None: If no matching APK is found.\n        tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n    \"\"\"\n    pkg_name = self.pkg_name\n    url = self.api_url + \"/app_exists\"\n    json = {\"pnames\": pkg_name}\n    response: requests.Response = self.session.post(\n        url, json=json, headers=self.headers\n    )\n    result = response.json()[\"data\"][0]\n    if result and result[\"exists\"]:\n        pname = result[\"pname\"]\n        if pname == pkg_name:\n            title = result[\"app\"][\"name\"]\n            apk_link = self.base_url + result[\"app\"][\"link\"]\n            return title, apk_link\n    return None\n</code></pre>"},{"location":"api.html#apksearch.APKPure","title":"<code>APKPure</code>","text":"<p>This class provides methods to search for an APK on APKPure based on package name, and to find available versions and their download links for a given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> required <p>Attributes:</p> Name Type Description <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> <code>base_url</code> <code>str</code> <p>The base URL of the APKPure website.</p> <code>search_url</code> <code>str</code> <p>The URL used to search for APKs on APKPure.</p> <code>headers</code> <code>dict</code> <p>The headers used for making HTTP requests.</p> <code>session</code> <code>Session</code> <p>The session object used for making HTTP requests.</p> <p>Methods:</p> Name Description <code>search_apk</code> <p>Searches for the APK on APKPure and returns the title and link if found.</p> <code>find_versions</code> <p>str) -&gt; list[tuple[str, str]]: Finds and returns a list of versions and their download links for the given APK link.</p> Source code in <code>apksearch/sites/apkpure.py</code> <pre><code>class APKPure:\n    \"\"\"\n    This class provides methods to search for an APK on APKPure based on package name,\n    and to find available versions and their download links for a given APK link.\n\n    Parameters:\n        pkg_name (str): The package name of the APK to search for.\n\n    Attributes:\n        pkg_name (str): The package name of the APK to search for.\n        base_url (str): The base URL of the APKPure website.\n        search_url (str): The URL used to search for APKs on APKPure.\n        headers (dict): The headers used for making HTTP requests.\n        session (requests.Session): The session object used for making HTTP requests.\n\n    Methods:\n        search_apk() -&gt; None | tuple[str, str]:\n            Searches for the APK on APKPure and returns the title and link if found.\n\n        find_versions(apk_link: str) -&gt; list[tuple[str, str]]:\n            Finds and returns a list of versions and their download links for the given APK link.\n    \"\"\"\n\n    def __init__(self, pkg_name: str):\n        self.pkg_name = pkg_name\n        self.base_url = \"https://apkpure.net\"\n        self.cdn_url = \"https://d.cdnpure.com/b/APK/\"\n        self.cdn_version = \"?version=\"\n        self.search_url = self.base_url + \"/search?q=\"\n        self.api_url = \"https://tapi.pureapk.com/v3/get_app_his_version\"\n        self.api_headers = {\n            \"User-Agent-WebView\": \"Mozilla/5.0 (Linux; Android 13; Pixel 5 Build/TQ3A.230901.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/132.0.6834.122 Safari/537.36\",\n            \"User-Agent\": \"Dalvik/2.1.0 (Linux; U; Android 13; Pixel 5 Build/TQ3A.230901.001); APKPure/3.20.34 (Aegon)\",\n            \"Ual-Access-Businessid\": \"projecta\",\n            \"Ual-Access-ProjectA\": \"\"\"{\"device_info\":{\"abis\":[\"x86_64\",\"arm64-v8a\",\"x86\",\"armeabi-v7a\",\"armeabi\"],\"android_id\":\"50f838123d9a9c94\",\"brand\":\"google\",\"country\":\"United States\",\"country_code\":\"US\",\"imei\":\"\",\"language\":\"en-US\",\"manufacturer\":\"Google\",\"mode\":\"Pixel 5\",\"os_ver\":\"33\",\"os_ver_name\":\"13\",\"platform\":1,\"product\":\"redfin\",\"screen_height\":1080,\"screen_width\":1920},\"host_app_info\":{\"build_no\":\"468\",\"channel\":\"\",\"md5\":\"6756e53158d6f6c013650a40d8f1147b\",\"pkg_name\":\"com.apkpure.aegon\",\"sdk_ver\":\"3.20.34\",\"version_code\":3203427,\"version_name\":\"3.20.34\"}}\"\"\",\n            \"Ual-Access-ExtInfo\": \"\"\"{\"ext_info\":\"{\\\"gaid\\\":\\\"\\\",\\\"oaid\\\":\\\"\\\"}\",\"lbs_info\":{\"accuracy\":0.0,\"city\":\"\",\"city_code\":0,\"country\":\"\",\"country_code\":\"\",\"district\":\"\",\"latitude\":0.0,\"longitude\":0.0,\"province\":\"\",\"street\":\"\"}}\"\"\",\n            \"Ual-Access-Sequence\": \"\",\n            \"Ual-Access-Nonce\": \"21448252\",\n            \"Ual-Access-Timestamp\": \"1738560597165\",\n            \"Connection\": \"Keep-Alive\",\n            \"Accept-Encoding\": \"gzip\",\n        }\n        self.headers = {\n            \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n            \"accept-language\": \"en-US,en;q=0.9,en-IN;q=0.8\",\n            \"cache-control\": \"no-cache\",\n            \"dnt\": \"1\",\n            \"pragma\": \"no-cache\",\n            \"priority\": \"u=0, i\",\n            \"referer\": \"https://apkpure.net/\",\n            \"sec-ch-ua\": '\"Microsoft Edge\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            \"sec-fetch-user\": \"?1\",\n            \"upgrade-insecure-requests\": \"1\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0\",\n        }\n        self.session = requests.Session()\n\n    def _api_search(self) -&gt; None | tuple[str, list[tuple[str, str]]]:\n        \"\"\"\n        Attempts to fetch app information using API.\n\n        Returns:\n            None: If API request fails or no data found\n            tuple[str, list[tuple[str, str]]]: App title and list of (version, download_url) tuples\n        \"\"\"\n        try:\n            params = {\"package_name\": self.pkg_name, \"hl\": \"en\"}\n            response = self.session.get(\n                self.api_url, headers=self.api_headers, params=params\n            )\n            data = response.json()\n\n            if not data.get(\"version_list\"):\n                return None\n\n            versions_info = []\n            title = None\n\n            for version in data[\"version_list\"]:\n                version_name = version[\"version_name\"]\n                if not title:\n                    title = version[\"title\"]\n                if version.get(\"asset\", {}).get(\"urls\"):\n                    download_url = version[\"asset\"][\"urls\"][0]\n                    versions_info.append((version_name, download_url))\n\n            return (title, versions_info) if title and versions_info else None\n\n        except Exception:\n            return None\n\n    def search_apk(self) -&gt; None | tuple[str, str]:\n        \"\"\"\n        Searches for the APK on APKPure and returns the title and link if found.\n\n        Returns:\n            None: If no matching APK is found.\n            tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n        \"\"\"\n        pkg_name = self.pkg_name\n        url = self.search_url + pkg_name\n        response: requests.Response = self.session.get(url, headers=self.headers)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        search_results = soup.find(\"div\", {\"class\": \"apk-list\"})\n        if search_results:\n            apk_items = search_results.find_all(\"a\", {\"class\": \"apk-item\"})\n            if apk_items:\n                for apk_item in apk_items:\n                    apk_link = self.base_url + apk_item[\"href\"]\n                    apk_title = apk_item[\"title\"]\n                    apk_package_name = apk_item[\"data-dt-pkg\"]\n                    if apk_package_name == pkg_name:\n                        return apk_title, apk_link\n        # If site search resulted 0 results, try cdn link\n        # https://github.com/AbhiTheModder/apksearch/issues/2\n        url = self.cdn_url + pkg_name + self.cdn_version + \"latest\"\n        response: requests.Response = self.session.get(\n            url, headers=self.headers, allow_redirects=False\n        )\n        try:\n            location = response.headers.get(\"Location\")\n        except AttributeError:\n            location = None\n        if location:\n            if location == \"https://apkpure.com\":\n                return None\n            response: requests.Response = self.session.head(\n                location, allow_redirects=False\n            )\n            try:\n                content = response.headers.get(\"Content-Disposition\")\n            except AttributeError:\n                return None\n            if content:\n                apk_title = content.split(\"filename=\")[1].strip('\"').split(\"_\")[0]\n                return apk_title, location\n\n        api_result = self._api_search()\n        if api_result:\n            title, versions = api_result\n            if versions:\n                return title, versions[0][1]\n\n        return None\n\n    def find_versions(self, apk_link: str) -&gt; list[tuple[str, str]]:\n        \"\"\"\n        Finds and returns a list of versions and their download links for the given APK link.\n\n        Parameters:\n            apk_link (str): The link to the APK on the APKPure website.\n\n        Returns:\n            list[tuple[str, str]]: A list of tuples, where each tuple contains the version number\n            and its corresponding download link. If no versions are found, an empty list is returned.\n        \"\"\"\n        api_result = self._api_search()\n        if api_result:\n            return api_result[1]\n\n        versions_info = []\n        if apk_link.startswith(self.base_url):\n            url = apk_link + \"/versions\"\n            response: requests.Response = self.session.get(url, headers=self.headers)\n            soup = BeautifulSoup(response.text, \"html.parser\")\n            versions_list = soup.find(\"ul\", {\"class\": \"version-list\"})\n\n            if versions_list:\n                versions = versions_list.find_all(\n                    \"li\", {\"class\": re.compile(\"^version dt-version-item.*\")}\n                )\n                for ver in versions:\n                    version_icon = ver.find(\"a\", {\"class\": \"dt-version-icon\"})\n                    version_info = ver.find(\"div\", {\"class\": \"version-info\"})\n                    if version_icon and version_info:\n                        version_number = version_info.find(\n                            \"span\", {\"class\": \"name one-line\"}\n                        ).text\n                        download_url = self.base_url + version_icon[\"href\"]\n                        versions_info.append((version_number, download_url))\n        return versions_info\n</code></pre>"},{"location":"api.html#apksearch.APKPure.find_versions","title":"<code>find_versions(apk_link)</code>","text":"<p>Finds and returns a list of versions and their download links for the given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>apk_link</code> <code>str</code> <p>The link to the APK on the APKPure website.</p> required <p>Returns:</p> Type Description <code>list[tuple[str, str]]</code> <p>list[tuple[str, str]]: A list of tuples, where each tuple contains the version number</p> <code>list[tuple[str, str]]</code> <p>and its corresponding download link. If no versions are found, an empty list is returned.</p> Source code in <code>apksearch/sites/apkpure.py</code> <pre><code>def find_versions(self, apk_link: str) -&gt; list[tuple[str, str]]:\n    \"\"\"\n    Finds and returns a list of versions and their download links for the given APK link.\n\n    Parameters:\n        apk_link (str): The link to the APK on the APKPure website.\n\n    Returns:\n        list[tuple[str, str]]: A list of tuples, where each tuple contains the version number\n        and its corresponding download link. If no versions are found, an empty list is returned.\n    \"\"\"\n    api_result = self._api_search()\n    if api_result:\n        return api_result[1]\n\n    versions_info = []\n    if apk_link.startswith(self.base_url):\n        url = apk_link + \"/versions\"\n        response: requests.Response = self.session.get(url, headers=self.headers)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        versions_list = soup.find(\"ul\", {\"class\": \"version-list\"})\n\n        if versions_list:\n            versions = versions_list.find_all(\n                \"li\", {\"class\": re.compile(\"^version dt-version-item.*\")}\n            )\n            for ver in versions:\n                version_icon = ver.find(\"a\", {\"class\": \"dt-version-icon\"})\n                version_info = ver.find(\"div\", {\"class\": \"version-info\"})\n                if version_icon and version_info:\n                    version_number = version_info.find(\n                        \"span\", {\"class\": \"name one-line\"}\n                    ).text\n                    download_url = self.base_url + version_icon[\"href\"]\n                    versions_info.append((version_number, download_url))\n    return versions_info\n</code></pre>"},{"location":"api.html#apksearch.APKPure.search_apk","title":"<code>search_apk()</code>","text":"<p>Searches for the APK on APKPure and returns the title and link if found.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None | tuple[str, str]</code> <p>If no matching APK is found.</p> <code>None | tuple[str, str]</code> <p>tuple[str, str]: A tuple containing the title and link of the matching APK if found.</p> Source code in <code>apksearch/sites/apkpure.py</code> <pre><code>def search_apk(self) -&gt; None | tuple[str, str]:\n    \"\"\"\n    Searches for the APK on APKPure and returns the title and link if found.\n\n    Returns:\n        None: If no matching APK is found.\n        tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n    \"\"\"\n    pkg_name = self.pkg_name\n    url = self.search_url + pkg_name\n    response: requests.Response = self.session.get(url, headers=self.headers)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    search_results = soup.find(\"div\", {\"class\": \"apk-list\"})\n    if search_results:\n        apk_items = search_results.find_all(\"a\", {\"class\": \"apk-item\"})\n        if apk_items:\n            for apk_item in apk_items:\n                apk_link = self.base_url + apk_item[\"href\"]\n                apk_title = apk_item[\"title\"]\n                apk_package_name = apk_item[\"data-dt-pkg\"]\n                if apk_package_name == pkg_name:\n                    return apk_title, apk_link\n    # If site search resulted 0 results, try cdn link\n    # https://github.com/AbhiTheModder/apksearch/issues/2\n    url = self.cdn_url + pkg_name + self.cdn_version + \"latest\"\n    response: requests.Response = self.session.get(\n        url, headers=self.headers, allow_redirects=False\n    )\n    try:\n        location = response.headers.get(\"Location\")\n    except AttributeError:\n        location = None\n    if location:\n        if location == \"https://apkpure.com\":\n            return None\n        response: requests.Response = self.session.head(\n            location, allow_redirects=False\n        )\n        try:\n            content = response.headers.get(\"Content-Disposition\")\n        except AttributeError:\n            return None\n        if content:\n            apk_title = content.split(\"filename=\")[1].strip('\"').split(\"_\")[0]\n            return apk_title, location\n\n    api_result = self._api_search()\n    if api_result:\n        title, versions = api_result\n        if versions:\n            return title, versions[0][1]\n\n    return None\n</code></pre>"},{"location":"api.html#apksearch.APKad","title":"<code>APKad</code>","text":"<p>This class provides methods to search for an APK on APKAD based on package name, and to find available versions and their download links for a given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> required <p>Attributes:</p> Name Type Description <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> <code>base_url</code> <code>str</code> <p>The base URL of the APKAD website.</p> <code>search_url</code> <code>str</code> <p>The URL used to search for APKs on APKAD.</p> <code>headers</code> <code>dict</code> <p>The headers used for making HTTP requests.</p> <code>session</code> <code>Session</code> <p>The session object used for making HTTP requests.</p> <p>Methods:</p> Name Description <code>search_apk</code> <p>Searches for the APK on APKAD and returns the title and link if found.</p> Source code in <code>apksearch/sites/apkad.py</code> <pre><code>class APKad:\n    \"\"\"\n    This class provides methods to search for an APK on APKAD based on package name,\n    and to find available versions and their download links for a given APK link.\n\n    Parameters:\n        pkg_name (str): The package name of the APK to search for.\n\n    Attributes:\n        pkg_name (str): The package name of the APK to search for.\n        base_url (str): The base URL of the APKAD website.\n        search_url (str): The URL used to search for APKs on APKAD.\n        headers (dict): The headers used for making HTTP requests.\n        session (requests.Session): The session object used for making HTTP requests.\n\n    Methods:\n        search_apk() -&gt; None | tuple[str, str]:\n            Searches for the APK on APKAD and returns the title and link if found.\n    \"\"\"\n\n    def __init__(self, pkg_name: str):\n        self.pkg_name = pkg_name\n        self.base_url = \"https://apkdownloader.pages.dev\"\n        self.api_url = \"https://api.mi9.com\"\n        self.token_url = \"https://token.mi9.com/\"\n        self.search_url = self.api_url + \"/get\"\n        self.headers = {\n            \"accept\": \"text/event-stream\",\n            \"accept-language\": \"en-US,en;q=0.9,en-IN;q=0.8\",\n            \"cache-control\": \"no-cache\",\n            \"dnt\": \"1\",\n            \"origin\": \"https://apkdownloader.pages.dev\",\n            \"pragma\": \"no-cache\",\n            \"priority\": \"u=1, i\",\n            \"referer\": \"https://apkdownloader.pages.dev/\",\n            \"sec-ch-ua\": '\"Microsoft Edge\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0\",\n        }\n        self.session = requests.Session()\n\n    def get_token(self) -&gt; tuple[str, int] | None:\n        \"\"\"\n        Retrieves a token from the token endpoint.\n\n        Returns:\n            tuple[str, int]: A tuple containing the token and timestamp if successful.\n            None: If the token retrieval fails.\n        \"\"\"\n        data = {\n            \"package\": self.pkg_name,\n            \"device\": \"phone\",\n            \"arch\": \"arm64-v8a\",\n            \"vc\": \"\",\n            \"device_id\": \"\",\n            \"sdk\": \"default\",\n        }\n        response = self.session.post(self.token_url, headers=self.headers, json=data)\n        if response.status_code == 200:\n            token_data = response.json()\n            if token_data.get(\"success\"):\n                return token_data.get(\"token\"), token_data.get(\"timestamp\")\n        return None\n\n    def search_apk(self) -&gt; None | tuple[str, list[tuple[str, str]]]:\n        token_tuple = self.get_token()\n        if not token_tuple:\n            return None\n\n        token, ts = token_tuple\n        data_json = json.dumps(\n            {\n                \"hl\": \"en\",\n                \"package\": self.pkg_name,\n                \"device\": \"phone\",\n                \"arch\": \"arm64-v8a\",\n                \"vc\": \"\",\n                \"device_id\": \"\",\n                \"sdk\": \"default\",\n                \"timestamp\": ts,\n            },\n            separators=(\",\", \":\"),\n        )\n\n        data_b64 = base64.b64encode(data_json.encode(\"utf-8\")).decode(\"utf-8\")\n\n        params = {\"token\": token, \"data\": data_b64}\n\n        response = self.session.get(\n            self.search_url, headers=self.headers, params=params, stream=True\n        )\n\n        stream_response = None\n        for line in response.iter_lines():\n            if not line:\n                continue\n            line_response = line.decode(\"utf-8\")\n            if line_response.startswith(\"data: \"):\n                payload = line_response[6:]\n                try:\n                    j = json.loads(payload)\n                    if j.get(\"progress\") == 100 and j.get(\"html\"):\n                        stream_response = j\n                        break\n                except json.JSONDecodeError:\n                    continue\n\n        if stream_response:\n            html_body = stream_response[\"html\"]\n            soup = BeautifulSoup(html_body, \"html.parser\")\n            if not soup:\n                return None\n\n            title = soup.find(\"li\", {\"class\": \"_title\"})\n            title = title.text.strip() if title else self.pkg_name\n\n            apk_files_div = soup.find(\"div\", {\"id\": \"apkslist\"})\n            if not apk_files_div:\n                return None\n\n            apk_links: list[tuple[str, str]] = []\n            for a in apk_files_div.find_all(\"a\", href=True):\n                link = a[\"href\"].strip()\n                filename = a.find(\"span\", {\"class\": \"der_name\"})\n                filename = filename.text.strip() if filename else link.split(\"/\")[-1]\n                apk_links.append((filename, link))\n\n            return title, apk_links\n\n        return None\n</code></pre>"},{"location":"api.html#apksearch.APKad.get_token","title":"<code>get_token()</code>","text":"<p>Retrieves a token from the token endpoint.</p> <p>Returns:</p> Name Type Description <code>tuple[str, int] | None</code> <p>tuple[str, int]: A tuple containing the token and timestamp if successful.</p> <code>None</code> <code>tuple[str, int] | None</code> <p>If the token retrieval fails.</p> Source code in <code>apksearch/sites/apkad.py</code> <pre><code>def get_token(self) -&gt; tuple[str, int] | None:\n    \"\"\"\n    Retrieves a token from the token endpoint.\n\n    Returns:\n        tuple[str, int]: A tuple containing the token and timestamp if successful.\n        None: If the token retrieval fails.\n    \"\"\"\n    data = {\n        \"package\": self.pkg_name,\n        \"device\": \"phone\",\n        \"arch\": \"arm64-v8a\",\n        \"vc\": \"\",\n        \"device_id\": \"\",\n        \"sdk\": \"default\",\n    }\n    response = self.session.post(self.token_url, headers=self.headers, json=data)\n    if response.status_code == 200:\n        token_data = response.json()\n        if token_data.get(\"success\"):\n            return token_data.get(\"token\"), token_data.get(\"timestamp\")\n    return None\n</code></pre>"},{"location":"api.html#apksearch.AppTeka","title":"<code>AppTeka</code>","text":"<p>This class provides methods to search for an APK on AppTeka based on package name, and to find available versions and their download links for a given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> required <p>Attributes:</p> Name Type Description <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> <code>base_url</code> <code>str</code> <p>The base URL of the AppTeka website.</p> <code>search_url</code> <code>str</code> <p>The URL used to search for APKs on AppTeka.</p> <code>headers</code> <code>dict</code> <p>The headers used for making HTTP requests.</p> <code>session</code> <code>Session</code> <p>The session object used for making HTTP requests.</p> <p>Methods:</p> Name Description <code>search_apk</code> <p>Searches for an APK on AppTeka based on the package name and version. Returns a tuple containing the APK name and download link if found, otherwise None.</p> Source code in <code>apksearch/sites/appteka.py</code> <pre><code>class AppTeka:\n    \"\"\"\n    This class provides methods to search for an APK on AppTeka based on package name,\n    and to find available versions and their download links for a given APK link.\n\n    Parameters:\n        pkg_name (str): The package name of the APK to search for.\n\n    Attributes:\n        pkg_name (str): The package name of the APK to search for.\n        base_url (str): The base URL of the AppTeka website.\n        search_url (str): The URL used to search for APKs on AppTeka.\n        headers (dict): The headers used for making HTTP requests.\n        session (requests.Session): The session object used for making HTTP requests.\n\n    Methods:\n        search_apk(version) -&gt; None | tuple[str, str]:\n            Searches for an APK on AppTeka based on the package name and version.\n            Returns a tuple containing the APK name and download link if found, otherwise None.\n    \"\"\"\n\n    def __init__(self, pkg_name: str):\n        self.pkg_name = pkg_name\n        self.base_url = \"https://appteka.store\"\n        self.search_url = self.base_url + \"/list/?query=\"\n        self.headers = {\n            \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n            \"accept-language\": \"en-US,en;q=0.9,en-IN;q=0.8\",\n            \"cache-control\": \"no-cache\",\n            \"dnt\": \"1\",\n            \"connection\": \"keep-alive\",\n            \"pragma\": \"no-cache\",\n            \"referer\": \"https://appteka.store/list/\",\n            \"sec-ch-ua\": '\"Microsoft Edge\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            \"sec-fetch-user\": \"?1\",\n            \"upgrade-insecure-requests\": \"1\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0\",\n        }\n        self.session = requests.Session()\n\n    def search_apk(self, version: str | None = None) -&gt; None | tuple[str, str | None]:\n        \"\"\"\n        Searches for the APK on AppTeka and returns the title and link if found.\n\n        Parameters:\n           version (str, optional): The version of the APK to search for.\n\n        Returns:\n            None: If no matching APK is found.\n            tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n        \"\"\"\n        pkg_name = self.pkg_name\n        url = self.search_url + pkg_name\n        response: requests.Response = self.session.get(url, headers=self.headers)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        search_results = soup.find(\"div\", {\"class\": \"list-group\"})\n        if search_results:\n            apk_items = search_results.find_all(\n                \"a\",\n                {\"class\": \"list-group-item list-group-item-action d-flex gap-3 py-3\"},\n            )\n            if apk_items:\n                for apk_item in apk_items:\n                    apk_link = self.base_url + apk_item[\"href\"]\n                    apk_title = apk_item.find(\n                        \"strong\", {\"class\": \"text-gray-dark\"}\n                    ).text.strip()\n                    # Unfortunately, AppTeka does not provide a package name in the search results.\n                    # So, we can't compare the package names here.\n                    # We can instead do a workaround by doing a request to the apk_link and check the package name there.\n                    new_url = apk_link\n                    new_response: requests.Response = self.session.get(\n                        new_url, headers=self.headers\n                    )\n                    new_soup = BeautifulSoup(new_response.text, \"html.parser\")\n                    rows = new_soup.find_all(\"dl\", {\"class\": \"row\"})\n                    for row in rows:\n                        dt_tags = row.find_all(\"dt\")\n                        dd_tags = row.find_all(\"dd\")\n                        for dt, dd in zip(dt_tags, dd_tags):\n                            if dt.text.strip() == \"Package\":\n                                package_name = dd.text.strip()\n                                if package_name == pkg_name:\n                                    # Appteka also stores the list of all the versions on same page\n                                    # So, if the version param is given then we can check if the version is available or not\n                                    if version:\n                                        version_modal = new_soup.find(\n                                            \"div\", {\"id\": \"versionsModal\"}\n                                        )\n                                        if version_modal:\n                                            version_links = version_modal.find_all(\n                                                \"a\",\n                                                {\n                                                    \"class\": re.compile(\n                                                        \"^list-group-item list-group-item-action*\"\n                                                    )\n                                                },\n                                            )\n                                            for link in version_links:\n                                                version_text = (\n                                                    link.find(\"p\", {\"class\": \"m-1\"})\n                                                    .text.strip()\n                                                    .split(\"\\xa0\")[0]\n                                                )\n                                                if version_text == version:\n                                                    apk_link = (\n                                                        self.base_url + link[\"href\"]\n                                                    )\n                                                    return apk_title, apk_link\n                                            return apk_title, None\n                                    else:\n                                        return apk_title, apk_link\n\n        return None\n</code></pre>"},{"location":"api.html#apksearch.AppTeka.search_apk","title":"<code>search_apk(version=None)</code>","text":"<p>Searches for the APK on AppTeka and returns the title and link if found.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The version of the APK to search for.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None | tuple[str, str | None]</code> <p>If no matching APK is found.</p> <code>None | tuple[str, str | None]</code> <p>tuple[str, str]: A tuple containing the title and link of the matching APK if found.</p> Source code in <code>apksearch/sites/appteka.py</code> <pre><code>def search_apk(self, version: str | None = None) -&gt; None | tuple[str, str | None]:\n    \"\"\"\n    Searches for the APK on AppTeka and returns the title and link if found.\n\n    Parameters:\n       version (str, optional): The version of the APK to search for.\n\n    Returns:\n        None: If no matching APK is found.\n        tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n    \"\"\"\n    pkg_name = self.pkg_name\n    url = self.search_url + pkg_name\n    response: requests.Response = self.session.get(url, headers=self.headers)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    search_results = soup.find(\"div\", {\"class\": \"list-group\"})\n    if search_results:\n        apk_items = search_results.find_all(\n            \"a\",\n            {\"class\": \"list-group-item list-group-item-action d-flex gap-3 py-3\"},\n        )\n        if apk_items:\n            for apk_item in apk_items:\n                apk_link = self.base_url + apk_item[\"href\"]\n                apk_title = apk_item.find(\n                    \"strong\", {\"class\": \"text-gray-dark\"}\n                ).text.strip()\n                # Unfortunately, AppTeka does not provide a package name in the search results.\n                # So, we can't compare the package names here.\n                # We can instead do a workaround by doing a request to the apk_link and check the package name there.\n                new_url = apk_link\n                new_response: requests.Response = self.session.get(\n                    new_url, headers=self.headers\n                )\n                new_soup = BeautifulSoup(new_response.text, \"html.parser\")\n                rows = new_soup.find_all(\"dl\", {\"class\": \"row\"})\n                for row in rows:\n                    dt_tags = row.find_all(\"dt\")\n                    dd_tags = row.find_all(\"dd\")\n                    for dt, dd in zip(dt_tags, dd_tags):\n                        if dt.text.strip() == \"Package\":\n                            package_name = dd.text.strip()\n                            if package_name == pkg_name:\n                                # Appteka also stores the list of all the versions on same page\n                                # So, if the version param is given then we can check if the version is available or not\n                                if version:\n                                    version_modal = new_soup.find(\n                                        \"div\", {\"id\": \"versionsModal\"}\n                                    )\n                                    if version_modal:\n                                        version_links = version_modal.find_all(\n                                            \"a\",\n                                            {\n                                                \"class\": re.compile(\n                                                    \"^list-group-item list-group-item-action*\"\n                                                )\n                                            },\n                                        )\n                                        for link in version_links:\n                                            version_text = (\n                                                link.find(\"p\", {\"class\": \"m-1\"})\n                                                .text.strip()\n                                                .split(\"\\xa0\")[0]\n                                            )\n                                            if version_text == version:\n                                                apk_link = (\n                                                    self.base_url + link[\"href\"]\n                                                )\n                                                return apk_title, apk_link\n                                        return apk_title, None\n                                else:\n                                    return apk_title, apk_link\n\n    return None\n</code></pre>"},{"location":"api.html#apksearch.Aptoide","title":"<code>Aptoide</code>","text":"<p>This class provides methods to search for an APK on Aptoide based on package name, and to find available versions and their download links for a given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> required <p>Attributes:</p> Name Type Description <code>pkg_name</code> <code>str</code> <p>The package name of the APK to search for.</p> <code>api_url</code> <code>str</code> <p>The base URL for the Aptoide API.</p> <code>search_url</code> <code>str</code> <p>The URL used to search for APKs on Aptoide.</p> <code>headers</code> <code>dict</code> <p>The headers used for making HTTP requests.</p> <code>session</code> <code>Session</code> <p>The session object used for making HTTP requests.</p> <p>Methods:</p> Name Description <code>search_apk</code> <p>Searches for the APK on Aptoide and returns the title and link if found.</p> <code>find_versions</code> <p>str) -&gt; list[str | None]: Finds and returns a list of versions for the given APK link.</p> Source code in <code>apksearch/sites/aptoide.py</code> <pre><code>class Aptoide:\n    \"\"\"\n    This class provides methods to search for an APK on Aptoide based on package name,\n    and to find available versions and their download links for a given APK link.\n\n    Parameters:\n        pkg_name (str): The package name of the APK to search for.\n\n    Attributes:\n        pkg_name (str): The package name of the APK to search for.\n        api_url (str): The base URL for the Aptoide API.\n        search_url (str): The URL used to search for APKs on Aptoide.\n        headers (dict): The headers used for making HTTP requests.\n        session (requests.Session): The session object used for making HTTP requests.\n\n    Methods:\n        search_apk() -&gt; None | tuple[str, str]:\n            Searches for the APK on Aptoide and returns the title and link if found.\n\n        find_versions(apk_link: str) -&gt; list[str | None]:\n            Finds and returns a list of versions for the given APK link.\n    \"\"\"\n\n    def __init__(self, pkg_name: str):\n        self.pkg_name = pkg_name\n        self.api_url = \"https://ws75.aptoide.com/api/7\"\n        self.search_url = f\"{self.api_url}/apps/search\"\n        self.headers = {\n            \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n            \"accept-language\": \"en-US,en;q=0.9,en-IN;q=0.8\",\n            \"cache-control\": \"no-cache\",\n            \"dnt\": \"1\",\n            \"pragma\": \"no-cache\",\n            \"priority\": \"u=0, i\",\n            \"referer\": \"https://en.aptoide.com/\",\n            \"sec-ch-ua\": '\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Microsoft Edge\";v=\"132\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            \"sec-fetch-user\": \"?1\",\n            \"upgrade-insecure-requests\": \"1\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0\",\n        }\n        self.params = {\n            \"cdn\": \"web\",\n            \"q\": \"bXlDUFU9YXJtNjQtdjhhLGFybWVhYmktdjdhLGFybWVhYmkmbGVhbmJhY2s9MA\",\n            \"aab\": \"1\",\n            \"mature\": \"false\",\n            \"language\": \"en_US\",\n            \"country\": \"US\",\n            \"not_apk_tags\": \"\",\n            \"query\": self.pkg_name,\n            \"limit\": \"1\",\n            \"offset\": \"0\",\n            \"origin\": \"SITE\",\n            \"store_name\": \"aptoide-web\",\n        }\n        self.session = requests.Session()\n\n    def search_apk(self) -&gt; None | tuple[str, str]:\n        \"\"\"\n        Searches for the APK on Aptoide and returns the title and link if found.\n\n        Returns:\n            None: If no matching APK is found.\n            tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n        \"\"\"\n        pkg_name = self.pkg_name\n        url = self.search_url\n        response: requests.Response = self.session.get(\n            url, headers=self.headers, params=self.params\n        )\n        data = response.json()\n        if data and data[\"info\"][\"status\"] == \"OK\":\n            lis = data[\"datalist\"][\"list\"]\n            if lis:\n                package = data[\"datalist\"][\"list\"][0][\"package\"]\n                apk_title = data[\"datalist\"][\"list\"][0][\"name\"]\n                if package == pkg_name:\n                    app_id: int = data[\"datalist\"][\"list\"][0][\"id\"]\n                    meta_url = self.api_url + f\"/app/getMeta?app_id={app_id}\"\n                    meta_response: requests.Response = self.session.get(\n                        meta_url, headers=self.headers\n                    )\n                    meta_data = meta_response.json()\n                    if meta_data and meta_data[\"info\"][\"status\"] == \"OK\":\n                        url = meta_data[\"data\"][\"urls\"][\"w\"].split(\"?\")[0]\n                        return apk_title, url\n        return None\n\n    def find_versions(self, apk_link: str) -&gt; list[str | None]:\n        \"\"\"\n        Finds and returns a list of versions for the given APK link.\n\n        Parameters:\n            apk_link (str): The link to the APK on the Aptoide website.\n\n        Returns:\n           list[str | None]: A list of version strings for the given APK link.\n        \"\"\"\n        versions_info = []\n\n        url = apk_link + \"/versions\"\n        response: requests.Response = self.session.get(url, headers=self.headers)\n        soup = BeautifulSoup(response.content, \"html.parser\")\n        version_spans = soup.find_all(\"span\", string=re.compile(r\"^\\d+\\.\\d+\\.\\d+$\"))\n        for span in version_spans:\n            version = span.text\n            versions_info.append(version)\n\n        return versions_info\n</code></pre>"},{"location":"api.html#apksearch.Aptoide.find_versions","title":"<code>find_versions(apk_link)</code>","text":"<p>Finds and returns a list of versions for the given APK link.</p> <p>Parameters:</p> Name Type Description Default <code>apk_link</code> <code>str</code> <p>The link to the APK on the Aptoide website.</p> required <p>Returns:</p> Type Description <code>list[str | None]</code> <p>list[str | None]: A list of version strings for the given APK link.</p> Source code in <code>apksearch/sites/aptoide.py</code> <pre><code>def find_versions(self, apk_link: str) -&gt; list[str | None]:\n    \"\"\"\n    Finds and returns a list of versions for the given APK link.\n\n    Parameters:\n        apk_link (str): The link to the APK on the Aptoide website.\n\n    Returns:\n       list[str | None]: A list of version strings for the given APK link.\n    \"\"\"\n    versions_info = []\n\n    url = apk_link + \"/versions\"\n    response: requests.Response = self.session.get(url, headers=self.headers)\n    soup = BeautifulSoup(response.content, \"html.parser\")\n    version_spans = soup.find_all(\"span\", string=re.compile(r\"^\\d+\\.\\d+\\.\\d+$\"))\n    for span in version_spans:\n        version = span.text\n        versions_info.append(version)\n\n    return versions_info\n</code></pre>"},{"location":"api.html#apksearch.Aptoide.search_apk","title":"<code>search_apk()</code>","text":"<p>Searches for the APK on Aptoide and returns the title and link if found.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None | tuple[str, str]</code> <p>If no matching APK is found.</p> <code>None | tuple[str, str]</code> <p>tuple[str, str]: A tuple containing the title and link of the matching APK if found.</p> Source code in <code>apksearch/sites/aptoide.py</code> <pre><code>def search_apk(self) -&gt; None | tuple[str, str]:\n    \"\"\"\n    Searches for the APK on Aptoide and returns the title and link if found.\n\n    Returns:\n        None: If no matching APK is found.\n        tuple[str, str]: A tuple containing the title and link of the matching APK if found.\n    \"\"\"\n    pkg_name = self.pkg_name\n    url = self.search_url\n    response: requests.Response = self.session.get(\n        url, headers=self.headers, params=self.params\n    )\n    data = response.json()\n    if data and data[\"info\"][\"status\"] == \"OK\":\n        lis = data[\"datalist\"][\"list\"]\n        if lis:\n            package = data[\"datalist\"][\"list\"][0][\"package\"]\n            apk_title = data[\"datalist\"][\"list\"][0][\"name\"]\n            if package == pkg_name:\n                app_id: int = data[\"datalist\"][\"list\"][0][\"id\"]\n                meta_url = self.api_url + f\"/app/getMeta?app_id={app_id}\"\n                meta_response: requests.Response = self.session.get(\n                    meta_url, headers=self.headers\n                )\n                meta_data = meta_response.json()\n                if meta_data and meta_data[\"info\"][\"status\"] == \"OK\":\n                    url = meta_data[\"data\"][\"urls\"][\"w\"].split(\"?\")[0]\n                    return apk_title, url\n    return None\n</code></pre>"}]}